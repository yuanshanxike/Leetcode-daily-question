namespace L928;

public class Solution {
    public int MinMalwareSpread(int[][] graph, int[] initial) {
        var n = graph.Length;
        Array.Sort(initial); // 先对 initial 进行排序。之后对其中每个节点进行 DFS 时可以保证访问的节点编号顺序是从小到大
        var infectedArr = new bool[n];  // 会被之前作为 DFS 起点的节点感染的节点
        foreach (var init in initial)  // 初始化已被感染的节点
        {
            infectedArr[init] = true;
        }
        var maxSaveNum = -1;
        var ans = -1;
        var visited  = new HashSet<int>();
        foreach (var init in initial)
        {
            visited.Clear();
            visited.Add(init);  // 初始就需要标记为已访问，(可能)成为 DFS 的出口
            var nodeMaxSaveNum = 0;
            for (int j = 0; j < n; j++)
            {
                if (init != j && graph[init][j] == 1 && !infectedArr[j])
                {
                    // 将邻接的未被感染的块的节点数相加，就可以得到删除了这个节点后能够拯救的节点数（其中也包含其他感染源的连通块会返回 0）
                    nodeMaxSaveNum += Dfs(graph, visited, infectedArr, j);
                }
            }
            if (nodeMaxSaveNum > maxSaveNum) {
                maxSaveNum = nodeMaxSaveNum;
                ans = init;
            }
        }
        return ans;
    }
    
    /// <summary>
    /// DFS 统计未被感染的连通节点数。
    /// 如果遇到下一个节点是非 init 的被感染节点（当前未访问过的被感染节点），则之前统计的数据是无效的，返回 0，表示这个连通块没有节点能被拯救。
    /// 
    /// 实现时需要一个 visit bool数组或set标记已访问过的节点。
    /// init 节点初始就要加入到已访问的集合中。
    /// </summary>
    /// <param name="graph"></param>
    /// <param name="infectedArr">被感染的节点（不需要每次 Clear，通过前面节点被感染的节点对后面其他节点计算未被感染的连通块时有用）</param>
    /// <param name="visited">访问过的节点</param>
    /// <param name="start">当前所在节点</param>
    /// <returns>能被拯救的最大节点数</returns>
    private int Dfs(int[][] graph, HashSet<int> visited, bool[] infectedArr, int start) {
        visited.Add(start);
        infectedArr[start] = true;
        var nodeNum = 1;
        for (int j = 0; j < graph.Length; j++)
        {
            if (graph[start][j] == 0 || visited.Contains(j)) continue;

            if (infectedArr[j]) return 0;
            else {
                var nextNum = Dfs(graph, visited, infectedArr, j);
                if (nextNum == 0) return 0;
                else nodeNum += nextNum;
            }
        }
        return nodeNum;
    }
}