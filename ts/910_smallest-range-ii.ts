/**
 * 原数组中，大的需要变小，小的需要变大。才有可能使得数组的“分数”变小。
 * 为了方便实现上述需求，可以先将数组中的元素按从小到大排序。
 * 初始化“分数”为原数组中的最大值减去最小值，即最后一个元素减去第一个元素。
 * 枚举 i 为一个数组中的下标，范围是 [0, n - 2]。
 * i 及其之前的元素 +k, i 之后的元素 -k.
 * 此时的“分数”一定是：max(nums[n - 1] - k, nums[i] + k) - min(nums[0] + k, nums[i + 1] - k).
 * 维护每次计算的“分数”最小值。
 * @param nums 
 * @param k 
 */
function smallestRangeII(nums: number[], k: number): number {
    const n = nums.length
    nums.sort((a, b) => a - b)
    let ans = nums[n - 1] - nums[0]
    for (let i = 0; i < n - 1; i++) {
        ans = Math.min(ans, Math.max(nums[n - 1] - k, nums[i] + k) - Math.min(nums[0] + k, nums[i + 1] - k))
    }
    return ans
};

console.log(smallestRangeII([1], 0))
console.log(smallestRangeII([0,10], 2))
console.log(smallestRangeII([1,3,6], 3))
console.log(smallestRangeII([7,8,8,5,2], 4))
console.log(smallestRangeII([8038,9111,5458,8483,5052,9161,8368,2094,8366,9164,53,7222,9284,5059,4375,2667,2243,5329,3111,5678,5958,815,6841,1377,2752,8569,1483,9191,4675,6230,1169,9833,5366,502,1591,5113,2706,8515,3710,7272,1596,5114,3620,2911,8378,8012,4586,9610,8361,1646,2025,1323,5176,1832,7321,1900,1926,5518,8801,679,3368,2086,7486,575,9221,2993,421,1202,1845,9767,4533,1505,820,967,2811,5603,574,6920,5493,9490,9303,4648,281,2947,4117,2848,7395,930,1023,1439,8045,5161,2315,5705,7596,5854,1835,6591,2553,8628], 4643))