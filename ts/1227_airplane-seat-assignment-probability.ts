/**
 * 后面会不会有乘客坐错位置，完全取决于第一名乘客能不能坐对位置。
 * 如果第一名乘客选对位置，那么后面的乘客一定会正确坐到自己的位置上去；
 * 如果第一名乘客选错位置，假设他坐到了第 k 名乘客的座位上，那么第 k 名乘客也一定会坐错位置，但是第 2 ~ k - 1 名乘客一定会坐到自己正确的位置上去，第 k + 1 ~ n 名乘客有可能会因为被别人占了自己的位置而坐在别人的位置。
 * 
 * 可以从小到大枚举部分 n，来探寻其中的规律：
 * 当 n = 1, 虽然第一名乘客的票丢了，且不知道该坐哪里，但他没有选择，只有一个座位可以坐，且就是他的座位，所以“第 1 位乘客客坐在自己的座位上的概率”是 1；
 * ② 当 n = 2, 第一名乘客面临座位二选一，如果选对了自己的座位，第二名乘客也能选对自己的座位，如果选错了（把第二名乘客的座位占了），那么第二名乘客也一定会坐错位置。综合来看，“第 2 位坐在自己的座位上的概率”是 1/2；
 * 接着，来看 n = 3 时的情况。第一名乘客面临三选一的抉择。同样，如果其选择了属于自己的座位，那后面的乘客一定能正确坐到自己的座位上去。此时“第 n 位乘客坐在自己的座位上的概率”只与第一名乘客能否正确坐到自己座位上的概率有关，为 1/3。
 * 如果第一名乘客错误地选择了属于第二名乘客的座位，那么，当轮到第二名乘客就坐时，因为自己的座位被占据了，所以会在其余的两个座位中进行二选一，如果其坐到了第三名乘客的位置，那么当轮到第三名乘客就坐时，就只能选择第二名乘客的位置，也就是最后一名乘客只能坐到错误的位置上。如果第二名乘客坐到了第一名乘客的位置上，第三名乘客就能坐到自己的位置上去。此时，第二名乘客所面临的选择座位的情况，对于最后一名乘客（第 n 位乘客）的影响，与 ② 中第一名乘客的选择对最后一名乘客是否能坐对位置的影响一致。那么综合来讲，这里“第 n 位乘客坐在自己的座位上的概率”是 1/3 * 1/2 = 1/6。
 * 如果第一名乘客错误地选择了属于第三名乘客的座位，那么，第二名乘客一定能坐到自己的座位上，而轮到第三名旅客时，则只能选择坐到第一名旅客的座位上去。此时对于第三名乘客所面临的。对于这种情况，“第 n 位乘客坐在自己的座位上的概率”是 1/3 * 0 = 0。
 * 综上当 n = 3，“第 2 位坐在自己的座位上的概率”是 1/3 + 1/6 + 0 = 1/2.
 * 
 * 可以发现，第一名乘客所选的位置，如果排除掉第一个位置 和 最后一个位置，选择中间的剩余位置(假设是第 k (1 < k < n) 个位置)作为前提条件，“第 n 位乘客客坐在自己的座位上的概率”（条件概率）等价于 n == n - k + 1 时计算出来的概率。（此时第 k 名乘客选择的座位对最后一名乘客能否坐到自己位置上的影响，与‘总共有 n - k + 1 名乘客时，第一名乘客所选座位对最后一名乘客能否坐到自己位置上的影响’是等价的，所以概率也是相同的）
 * 因此可以使用 动态规划 从小到大枚举 n 来计算目标人数所对应的概率。
 * 
 * 运用上面得出的结论，可以直接来计算 n = 4,5,6,.... ：
 * 当 n = 4, “第 4 位坐在自己的座位上的概率”是 1/4 + 1/4 * P(n=3) + 1/4 * P(n=2) + 0 = 1/4 + 1/4 * 1/2 + 1/4 * 1/2 + 0 = 1/2;
 * 当 n = 5, "第 5 位坐在自己的座位上的概率”是 1/5 + 1/5 * P(n=4) + 1/5 * P(n=3) + 1/5 * P(n=2) + 0 = 1/5 + 1/5 * 1/2 + 1/5 * 1/2 + 1/5 * 1/2 + 0 = 1/2;
 * ......
 * 观察上面的概率计算公式，从 n = 4 到 n = 5, 第一名乘客选择座位的概率会在分母端 +1，错选其他乘客座位导致影响到最后一名乘客正确入座的条件概率不变(依旧是 1/2)，能够错选影响到的乘客范围数+1(增加了一项 1/n * P(n-1)).
 * 将以上的计算方法写成通项递推公式：
 * 对于人数为 n 时，“第 n 位坐在自己的座位上的概率”是 1/n + (n - 2) * 1/n * 1/2 + 0 = 2/2n + (n - 2)/2n = n/2n = 1/2.
 * 所以如果从 n = 3 开始，使用以上的递推公式进行递推，可以计算得到概率恒为 1/2.
 * 所以可以得出结论：
 * 如果 n = 1 则对应概率为 1，如果 n > 1 则对应概率为 1/2.
 * @param n 
 */
function nthPersonGetsNthSeat(n: number): number {
    return n == 1 ? 1 : 1/2
};