package source.`1690`.`石子游戏 VII`

import kotlin.math.max
import kotlin.math.min

class Solution {
    /**
     * 假设 Alice 每次移除的数是 Ai，最后获得的总分是 Sa;
     * 假设 Alice 每次移除的数是 Bi，最后获得的总分是 Sb。
     * n 代表 stones 数组的长度
     *
     * 可以计算得到 Sa - Sb （具体怎么算看 apple free board）
     * 在 n 为奇数的时候 diff = SUM(stones) - (A0 + A1 + ... + An) = B0 + B1 + ... + Bn-1
     * 在 n 为偶数的时候 diff = B0 + B1 + ... + Bn
     *
     * 假设每次移除数字之前，数组从左往右的元素依次为 N(l), N(l+1), ...，从右往左的元素依次为 N(r), N(r-1), ...。
     *
     * ********************************************************************************************************
     *
     * 不能贪心地这么想当然：
     *
     * 根据以上两个式子，可以得出 Alice 和 Bob 每次移除石子的最佳策略：
     * 当 n 为奇数时：
     * Alice 每次拿走的石子的值要尽可能小；
     * Bob 每次拿走的石子，要使得下次 Alice 能拿的石子尽可能地大，即求 max(min(N(l+1), N(r)), min(N(l), N(r-1)))。根据计算结果来决定是要取左边还是右边。
     * 当 n 为偶数时：
     * Alice 每次拿走的石子，要使得下次 Bob 能拿的石子尽可能地大，即求 max(min(N(l+1), N(r)), min(N(l), N(r-1)))。根据计算结果来决定是要取左边还是右边;
     * Bob 每次拿走的石子的值要尽可能小。
     *
     * *********************************************************************************************************
     *
     * "要使得下次能拿的石子尽可能地大" 的算法不准确，只保证下次最大的话，并不一定保证全局最大！保证尽可能小的那一方倒是没问题
     */
    //    fun stoneGameVII(stones: IntArray): Int {
    //        // 头尾指针，用来表示剩余数组当前的范围
    //        var left = 0
    //        var right = stones.lastIndex
    //
    //        if (right % 2 == 0) { // 数组长度为奇数
    //            var sum = 0 // 等于 Alice 和 Bob 所有移除的数字相加
    //            while (left < right) {
    //                // Alice opt
    //                // 因为 Alice 移除的值在计算 diff 时是被减去的，所以不用加到 sum 中去
    //                if (stones[left] <= stones[right])
    //                    left++
    //                else
    //                    right--
    //
    //                if (left >= right) return sum
    //
    //                // Bob opt
    //                val subNl = stones.getOrElse(left + 1) { Int.MAX_VALUE }
    //                val subNr = stones.getOrElse(right - 1) { Int.MAX_VALUE }
    //                sum += if (min(subNl, stones[right]) > min(stones[left], subNr))
    //                    stones[left++]
    //                else
    //                    stones[right--]
    //            }
    //            return sum
    //        } else { // 数组长度为偶数
    //            var diff = 0
    //            while (left < right) {
    //                // Alice opt
    //                val subNl = stones.getOrElse(left + 1) { Int.MAX_VALUE }
    //                val subNr = stones.getOrElse(right - 1) { Int.MAX_VALUE }
    //                if (min(subNl, stones[right]) >= min(stones[left], subNr))
    //                    left++
    //                else
    //                    right--
    //
    //                // Bob opt
    ////                diff += if (stones[left] < stones[right])
    ////                    stones[left++]
    ////                else
    ////                    stones[right--]
    //                if (stones[left] < stones[right]) {
    //                    diff += stones[left]
    //                    left++
    //                } else {
    //                    diff += stones[right]
    //                    right--
    //                }
    //
    //            }
    //            return diff
    //        }
    //    }

    //    private fun directlyOpt() {
    //        
    //    }

    private data class CacheUnit(
            val i: Int,
            val j: Int,
            val isAlice: Boolean
    )

    // 记忆化（递归）int[i][j][isAlice]
    private var dfsCache: HashMap<CacheUnit, Int>? = null

    fun stoneGameVII(stones: IntArray): Int {
//        dfsCache = HashMap()
//        return stones.dfs(0, stones.lastIndex, true)

        return stones.iterate(0, stones.lastIndex)
    }

    /**
     * 记忆化搜索
     * @param i 子区间的左边界
     * @param j 子区间的右边界
     * @param isAlice 因为对于不同的人，状态转移的方程不同
     */
    private fun IntArray.dfs(i: Int, j: Int, isAlice: Boolean): Int {
        val cacheUnit = CacheUnit(i, j, isAlice)
        dfsCache?.get(cacheUnit)
                ?.also { return it }

        if (i == j) {
            return if (isAlice) 0 else this[i]
        }

        return (if (isAlice) {
            max(dfs(i + 1, j, isAlice.not()), dfs(i, j - 1, isAlice.not()))
        } else { // Bob
            min(dfs(i + 1, j, isAlice.not()) + this[i], dfs(i, j - 1, isAlice.not()) + this[j])
        }).also {
            dfsCache?.set(cacheUnit, it)
        }
    }

    /**
     * 动态规划(相当于从小字串到大，加数据)
     */
    private fun IntArray.iterate(left: Int, right: Int): Int {
        val dp = Array(size) { IntArray(size) { 0 } }
        var isFirstAlice = true
        if (size % 2 == 0) {
            isFirstAlice = false
            forEachIndexed { idx, v ->
                dp[idx][idx] = v
            }
        }
        for (i in right - 1 downTo left) {
            for (j in i + 1..right) {
//                isAlice = isAlice.not() //这里不对
                if (isFirstAlice xor ((j - i) % 2 == 0)) {
                    dp[i][j] = min(dp[i + 1][j] + this[i], dp[i][j - 1] + this[j])
                } else {
                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])
                }
            }
        }
        return dp[left][right]
    }
}

fun main() {
    Solution().apply {
        stoneGameVII(intArrayOf(5, 3, 1, 4, 2)).also(::println)
        stoneGameVII(intArrayOf(7, 90, 5, 1, 100, 10, 10, 2)).also(::println)
        stoneGameVII(intArrayOf(1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1)).also(::println)
        stoneGameVII(intArrayOf(721, 979, 690, 84, 742, 873, 31, 323, 819, 22, 928, 866, 118, 843, 169, 818, 908, 832, 852, 480, 763, 715, 875, 629)).also(::println)
        stoneGameVII(intArrayOf(44, 849, 230, 178, 567, 83, 880, 648, 682, 683, 896, 867, 475, 645, 402, 864, 691, 72, 117, 553, 196, 464, 945, 473, 936, 172, 808, 264, 755, 342, 569, 445, 7, 366, 978, 968, 410, 527, 612, 427, 888, 585, 845, 267, 935, 816, 977, 233, 458, 287, 839, 643, 214, 263, 951, 724, 111, 199, 443, 623, 746, 264, 481, 204, 301, 884, 798, 244, 504, 102, 984, 354, 110, 146, 366, 499, 84, 720, 940, 224, 371, 96, 391, 941, 442, 583, 64, 342, 488, 852, 662, 936, 15, 375, 694, 499, 423, 965, 470, 774, 27, 666, 678, 216, 115, 554, 320, 920, 209, 835, 549, 184, 941, 432, 413, 263, 365, 666, 693, 552, 886, 806, 797, 453, 611, 166, 872, 7, 268, 808, 160, 198, 446, 977, 166, 502, 348, 94, 615, 534, 795, 178, 1000, 824, 316, 386, 855, 894, 57, 179, 922, 968, 50, 365, 995, 710, 499, 54, 128, 520, 742, 751, 708, 614, 388, 125, 376, 973, 710, 731, 566, 122, 513, 973, 263, 383, 132, 292, 218, 654, 690, 986, 412, 152, 606, 832, 758, 167, 160, 257, 642, 442, 485, 1000, 631, 387, 256, 479, 788, 29, 332, 949, 442, 658, 837, 266, 95, 406, 168, 199, 379, 14, 231, 692, 766, 505, 314, 351, 294, 499, 902, 415, 501, 601, 234, 827, 45, 227, 534, 791, 767, 859, 798, 549, 350, 863, 272, 764, 895, 748, 351, 399, 277, 334, 537, 859, 800, 884, 270, 934, 56, 743, 904, 829, 835, 373, 850, 413, 361, 649, 466, 244, 80, 106, 352, 999, 903, 485, 982, 732, 838, 968, 661, 368, 201, 77, 934, 658, 755, 586, 697, 41, 71, 191, 988, 659, 257, 918, 357, 222, 145, 23, 514, 602, 233, 281, 786, 873, 198, 326, 692, 33, 293, 91, 456, 756, 301, 651, 91, 183, 351, 517, 5, 273, 748, 234, 602, 390, 212, 842, 746, 986, 979, 356, 959, 973, 297, 704, 690, 2, 388, 504, 2, 475, 799, 6, 110, 100, 774, 298, 365, 192, 125, 554, 310, 787, 959, 145, 566, 609, 875, 947, 560, 336, 235, 53, 205, 785, 844, 538, 356, 660, 993, 854, 561, 873, 412, 173, 942, 97, 418, 21, 70, 518, 146, 193, 930, 634, 918, 330, 680, 99, 125, 423, 189, 771, 317, 159, 942, 591, 199, 556, 474, 217, 334, 184, 425, 790, 669, 23, 725, 245, 926, 190, 159, 903, 617, 6, 514, 825, 111, 963, 157, 195, 666, 940, 328, 58, 730, 727, 789, 995, 734, 181, 848, 332, 363, 196, 840, 230, 281, 136, 344, 88, 589, 892, 804, 680, 195, 458, 180, 43, 546, 82, 308, 493, 998, 80, 641, 313, 802, 639, 940, 481, 562, 215, 31, 595, 740, 644, 878, 93, 515, 898, 60, 6, 880, 673, 609, 238, 821, 691, 899, 392, 606, 910, 854, 292, 542, 882, 702, 593, 600, 975, 338, 238, 649, 254, 929, 789, 673, 987, 262, 753, 167, 557, 63, 249, 171, 875, 151, 707, 882, 733, 216, 525, 540, 611, 63, 407, 944, 802, 231, 443, 232, 93, 755, 637, 965, 403, 320, 640, 86, 204, 261, 271, 81, 626, 140, 570, 189, 371, 493, 528, 780, 393, 160, 143, 872, 148, 65, 775, 540, 240, 326, 345, 482, 322, 667, 709, 917, 812, 899, 512, 806, 436, 21, 835, 740, 622, 246, 100, 961, 641, 311, 390, 561, 838, 708, 998, 321, 824, 918, 429, 159, 728, 330, 645, 704, 374, 125, 479, 975, 539, 565, 361, 330, 688, 207, 976, 302, 309, 380, 876, 392, 658, 675, 525, 497, 182, 815, 731, 240, 975, 267, 16, 976, 490, 496, 515, 412, 484, 696, 232, 496, 628, 380, 51, 482, 17, 397, 826, 384, 670, 358, 884, 932, 346, 733, 827, 106, 876, 313, 227, 561, 709, 793, 137, 295, 181, 743, 872, 214, 998, 147, 51, 88, 79, 393, 851, 640, 141, 663, 153, 898, 652, 566, 600, 992, 851, 48, 414, 482, 651, 414, 769, 279, 349, 761, 202, 486, 700, 783, 410, 95, 813, 961, 410, 490, 974, 714, 140, 475, 737, 68, 556, 389, 911, 223, 605, 886, 428, 33, 245, 275, 375, 984, 691, 697, 619, 188, 26, 912, 816, 294, 513, 180, 888, 742, 535, 424, 51, 776, 961, 517, 558, 319, 730, 67, 199, 689, 821, 319, 69, 697, 847, 904, 47, 734, 676, 21, 836, 41, 667, 555, 869, 125, 927, 548, 959, 251, 219, 852, 480, 518, 724, 964, 944, 794, 620, 809, 49, 691, 479, 793, 470, 768, 784, 390, 536, 384, 743, 900, 394, 682, 184, 226, 484, 176, 936, 277, 793, 30, 596, 459, 429, 72, 714, 711, 307, 305, 933, 78, 24, 401, 652, 274, 706, 484, 261, 76, 396, 396, 675, 657, 375, 154, 461, 511, 611, 683, 442, 267, 579, 240, 421, 232, 948, 644, 185, 447, 635, 292, 100, 514, 90, 990, 87, 835, 490, 642, 454, 738, 839, 318, 307, 644, 225, 98, 664, 547, 173, 493, 865, 261, 115, 125, 421, 527, 70, 570, 571, 687, 785, 613, 511, 471, 874, 777, 786, 967, 958, 507, 611, 764, 89, 112, 987, 678, 536, 344, 101, 561, 30, 810, 431, 523, 797, 972, 583, 807, 914, 156, 304, 853, 604, 214, 698, 792, 908, 895, 324, 652, 795, 583, 651, 800, 108, 874, 585, 167, 120, 995, 363, 653, 814, 589, 911, 48, 593, 689, 130, 353, 498, 178, 121, 640, 471, 294, 66, 406, 759, 622, 667, 614, 99, 276, 682, 872, 553, 305, 719, 255, 27, 259, 595, 52, 551, 485, 566, 659, 647, 523, 104, 522, 127, 191, 371, 1000, 627, 15, 943, 497, 281, 265, 157, 488, 446, 839, 2, 338, 19, 717, 313, 416, 56, 448, 179, 144, 830, 179, 814, 792, 236, 347, 870, 27, 836, 958, 671, 453, 555, 879, 235, 955, 70, 326, 165, 14, 743, 21, 74, 268, 722, 98, 737, 129, 464, 923, 288, 548, 702, 646, 354, 432, 154, 838, 266, 492, 420)).also(::println)
    }
}